// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManagementMsg_AddrsEntry_DoNotUse_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartOrdersSubmission_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stats_RecordsEntry_DoNotUse_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsFields_message_2eproto;
class MsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg> _instance;
} _Msg_default_instance_;
class StatsFieldsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatsFields> _instance;
} _StatsFields_default_instance_;
class Stats_RecordsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stats_RecordsEntry_DoNotUse> _instance;
} _Stats_RecordsEntry_DoNotUse_default_instance_;
class StatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stats> _instance;
} _Stats_default_instance_;
class ManagementMsg_AddrsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManagementMsg_AddrsEntry_DoNotUse> _instance;
} _ManagementMsg_AddrsEntry_DoNotUse_default_instance_;
class ManagementMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManagementMsg> _instance;
} _ManagementMsg_default_instance_;
class HedgingHintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HedgingHint> _instance;
} _HedgingHint_default_instance_;
class HoldreleaseHintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HoldreleaseHint> _instance;
} _HoldreleaseHint_default_instance_;
class StartOrdersSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartOrdersSubmission> _instance;
} _StartOrdersSubmission_default_instance_;
class ManagementToDataplaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManagementToDataplane> _instance;
} _ManagementToDataplane_default_instance_;
static void InitDefaultsscc_info_HedgingHint_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HedgingHint_default_instance_;
    new (ptr) ::HedgingHint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HedgingHint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HedgingHint_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HedgingHint_message_2eproto}, {}};

static void InitDefaultsscc_info_HoldreleaseHint_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HoldreleaseHint_default_instance_;
    new (ptr) ::HoldreleaseHint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HoldreleaseHint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HoldreleaseHint_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HoldreleaseHint_message_2eproto}, {}};

static void InitDefaultsscc_info_ManagementMsg_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ManagementMsg_default_instance_;
    new (ptr) ::ManagementMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ManagementMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ManagementMsg_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ManagementMsg_message_2eproto}, {
      &scc_info_ManagementMsg_AddrsEntry_DoNotUse_message_2eproto.base,
      &scc_info_StartOrdersSubmission_message_2eproto.base,}};

static void InitDefaultsscc_info_ManagementMsg_AddrsEntry_DoNotUse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ManagementMsg_AddrsEntry_DoNotUse_default_instance_;
    new (ptr) ::ManagementMsg_AddrsEntry_DoNotUse();
  }
  ::ManagementMsg_AddrsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManagementMsg_AddrsEntry_DoNotUse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ManagementMsg_AddrsEntry_DoNotUse_message_2eproto}, {}};

static void InitDefaultsscc_info_ManagementToDataplane_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ManagementToDataplane_default_instance_;
    new (ptr) ::ManagementToDataplane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ManagementToDataplane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManagementToDataplane_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ManagementToDataplane_message_2eproto}, {
      &scc_info_StartOrdersSubmission_message_2eproto.base,}};

static void InitDefaultsscc_info_Msg_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Msg_default_instance_;
    new (ptr) ::Msg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Msg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Msg_message_2eproto}, {}};

static void InitDefaultsscc_info_StartOrdersSubmission_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartOrdersSubmission_default_instance_;
    new (ptr) ::StartOrdersSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartOrdersSubmission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartOrdersSubmission_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartOrdersSubmission_message_2eproto}, {}};

static void InitDefaultsscc_info_Stats_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Stats_default_instance_;
    new (ptr) ::Stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stats_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Stats_message_2eproto}, {
      &scc_info_Stats_RecordsEntry_DoNotUse_message_2eproto.base,}};

static void InitDefaultsscc_info_Stats_RecordsEntry_DoNotUse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Stats_RecordsEntry_DoNotUse_default_instance_;
    new (ptr) ::Stats_RecordsEntry_DoNotUse();
  }
  ::Stats_RecordsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stats_RecordsEntry_DoNotUse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Stats_RecordsEntry_DoNotUse_message_2eproto}, {
      &scc_info_StatsFields_message_2eproto.base,}};

static void InitDefaultsscc_info_StatsFields_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StatsFields_default_instance_;
    new (ptr) ::StatsFields();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StatsFields::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsFields_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatsFields_message_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Msg, msg_id_),
  PROTOBUF_FIELD_OFFSET(::Msg, client_send_time_),
  PROTOBUF_FIELD_OFFSET(::Msg, recipient_id_),
  PROTOBUF_FIELD_OFFSET(::Msg, root_send_time_),
  PROTOBUF_FIELD_OFFSET(::Msg, msg_type_),
  PROTOBUF_FIELD_OFFSET(::Msg, is_from_hedge_node_),
  PROTOBUF_FIELD_OFFSET(::Msg, experiment_starting_msg_id_),
  PROTOBUF_FIELD_OFFSET(::Msg, deadline_),
  PROTOBUF_FIELD_OFFSET(::Msg, downstream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatsFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StatsFields, latency_),
  PROTOBUF_FIELD_OFFSET(::StatsFields, release_time_),
  PROTOBUF_FIELD_OFFSET(::StatsFields, holding_duration_),
  PROTOBUF_FIELD_OFFSET(::StatsFields, deadline_),
  PROTOBUF_FIELD_OFFSET(::Stats_RecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Stats_RecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Stats_RecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Stats_RecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Stats, recipient_id_),
  PROTOBUF_FIELD_OFFSET(::Stats, records_),
  PROTOBUF_FIELD_OFFSET(::Stats, total_msgs_),
  PROTOBUF_FIELD_OFFSET(::ManagementMsg_AddrsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ManagementMsg_AddrsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ManagementMsg_AddrsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ManagementMsg_AddrsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ManagementMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ManagementMsg, mac_address_),
  PROTOBUF_FIELD_OFFSET(::ManagementMsg, ip_address_),
  PROTOBUF_FIELD_OFFSET(::ManagementMsg, addrs_),
  PROTOBUF_FIELD_OFFSET(::ManagementMsg, msg_type_),
  PROTOBUF_FIELD_OFFSET(::ManagementMsg, stop_),
  PROTOBUF_FIELD_OFFSET(::ManagementMsg, request_),
  PROTOBUF_FIELD_OFFSET(::ManagementMsg, data_),
  PROTOBUF_FIELD_OFFSET(::ManagementMsg, order_sub_req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HedgingHint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HedgingHint, proxy_num_),
  PROTOBUF_FIELD_OFFSET(::HedgingHint, intensity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HoldreleaseHint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HoldreleaseHint, index_),
  PROTOBUF_FIELD_OFFSET(::HoldreleaseHint, owd_estimates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartOrdersSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StartOrdersSubmission, request_id_),
  PROTOBUF_FIELD_OFFSET(::StartOrdersSubmission, rate_),
  PROTOBUF_FIELD_OFFSET(::StartOrdersSubmission, experiment_duration_),
  PROTOBUF_FIELD_OFFSET(::StartOrdersSubmission, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::StartOrdersSubmission, bid_range_start_),
  PROTOBUF_FIELD_OFFSET(::StartOrdersSubmission, bid_range_end_),
  PROTOBUF_FIELD_OFFSET(::StartOrdersSubmission, ask_range_start_),
  PROTOBUF_FIELD_OFFSET(::StartOrdersSubmission, ask_range_end_),
  PROTOBUF_FIELD_OFFSET(::StartOrdersSubmission, fixed_interarrival_),
  PROTOBUF_FIELD_OFFSET(::StartOrdersSubmission, use_fancypq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ManagementToDataplane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ManagementToDataplane, order_sub_req_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Msg)},
  { 14, -1, sizeof(::StatsFields)},
  { 23, 30, sizeof(::Stats_RecordsEntry_DoNotUse)},
  { 32, -1, sizeof(::Stats)},
  { 40, 47, sizeof(::ManagementMsg_AddrsEntry_DoNotUse)},
  { 49, -1, sizeof(::ManagementMsg)},
  { 62, -1, sizeof(::HedgingHint)},
  { 69, -1, sizeof(::HoldreleaseHint)},
  { 76, -1, sizeof(::StartOrdersSubmission)},
  { 91, -1, sizeof(::ManagementToDataplane)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StatsFields_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Stats_RecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ManagementMsg_AddrsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ManagementMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HedgingHint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HoldreleaseHint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StartOrdersSubmission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ManagementToDataplane_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\"\325\001\n\003Msg\022\016\n\006msg_id\030\001 \001(\003\022"
  "\030\n\020client_send_time\030\002 \001(\003\022\024\n\014recipient_i"
  "d\030\003 \001(\005\022\026\n\016root_send_time\030\004 \001(\003\022\020\n\010msg_t"
  "ype\030\005 \001(\005\022\032\n\022is_from_hedge_node\030\006 \001(\005\022\"\n"
  "\032experiment_starting_msg_id\030\007 \001(\003\022\020\n\010dea"
  "dline\030\010 \001(\003\022\022\n\ndownstream\030\t \001(\003\"`\n\013Stats"
  "Fields\022\017\n\007latency\030\001 \001(\003\022\024\n\014release_time\030"
  "\002 \001(\003\022\030\n\020holding_duration\030\003 \001(\005\022\020\n\010deadl"
  "ine\030\004 \001(\003\"\225\001\n\005Stats\022\024\n\014recipient_id\030\001 \001("
  "\005\022$\n\007records\030\002 \003(\0132\023.Stats.RecordsEntry\022"
  "\022\n\ntotal_msgs\030\003 \001(\003\032<\n\014RecordsEntry\022\013\n\003k"
  "ey\030\001 \001(\003\022\033\n\005value\030\002 \001(\0132\014.StatsFields:\0028"
  "\001\"\376\001\n\rManagementMsg\022\023\n\013mac_address\030\001 \001(\t"
  "\022\022\n\nip_address\030\002 \001(\t\022(\n\005addrs\030\003 \003(\0132\031.Ma"
  "nagementMsg.AddrsEntry\022\020\n\010msg_type\030\004 \001(\005"
  "\022\014\n\004stop\030\005 \001(\010\022\017\n\007request\030\006 \003(\t\022\014\n\004data\030"
  "\007 \001(\t\022-\n\rorder_sub_req\030\010 \001(\0132\026.StartOrde"
  "rsSubmission\032,\n\nAddrsEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001\"3\n\013HedgingHint\022\021\n\tpro"
  "xy_num\030\001 \001(\005\022\021\n\tintensity\030\002 \001(\002\"7\n\017Holdr"
  "eleaseHint\022\r\n\005index\030\001 \001(\005\022\025\n\rowd_estimat"
  "es\030\002 \003(\005\"\200\002\n\025StartOrdersSubmission\022\022\n\nre"
  "quest_id\030\001 \001(\004\022\014\n\004rate\030\002 \001(\005\022\033\n\023experime"
  "nt_duration\030\003 \001(\005\022\027\n\017start_timestamp\030\004 \001"
  "(\004\022\027\n\017bid_range_start\030\005 \001(\005\022\025\n\rbid_range"
  "_end\030\006 \001(\005\022\027\n\017ask_range_start\030\007 \001(\005\022\025\n\ra"
  "sk_range_end\030\010 \001(\005\022\032\n\022fixed_interarrival"
  "\030\t \001(\005\022\023\n\013use_fancypq\030\n \001(\010\"F\n\025Managemen"
  "tToDataplane\022-\n\rorder_sub_req\030\001 \001(\0132\026.St"
  "artOrdersSubmission*\365\002\n\013MessageType\022\017\n\013R"
  "EQ_UNKNOWN\020\000\022\017\n\013ACK_UNKNOWN\020\001\022\026\n\022REQ_MAC"
  "_COLLECTION\020\002\022\026\n\022ACK_MAC_COLLECTION\020\003\022\023\n"
  "\017REQ_MAC_ADDRESS\020\004\022\023\n\017ACK_MAC_ADDRESS\020\005\022"
  "\030\n\024REQ_STATS_COLLECTION\020\006\022\030\n\024ACK_STATS_C"
  "OLLECTION\020\007\022\032\n\026REQ_ACK_MAC_COLLECTION\020\010\022"
  "\033\n\027START_ORDERS_SUBMISSION\020\t\022\037\n\033ACK_STAR"
  "T_ORDERS_SUBMISSION\020\n\022\035\n\031REQ_MAC_COLLECT"
  "ION_STATUS\020\013\022\035\n\031ACK_MAC_COLLECTION_STATU"
  "S\020\014\022\036\n\032NACK_MAC_COLLECTION_STATUS\020\rb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[10] = {
  &scc_info_HedgingHint_message_2eproto.base,
  &scc_info_HoldreleaseHint_message_2eproto.base,
  &scc_info_ManagementMsg_message_2eproto.base,
  &scc_info_ManagementMsg_AddrsEntry_DoNotUse_message_2eproto.base,
  &scc_info_ManagementToDataplane_message_2eproto.base,
  &scc_info_Msg_message_2eproto.base,
  &scc_info_StartOrdersSubmission_message_2eproto.base,
  &scc_info_Stats_message_2eproto.base,
  &scc_info_Stats_RecordsEntry_DoNotUse_message_2eproto.base,
  &scc_info_StatsFields_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, descriptor_table_protodef_message_2eproto, "message.proto", 1563,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 10, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Msg::InitAsDefaultInstance() {
}
class Msg::_Internal {
 public:
};

Msg::Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Msg)
}
Msg::Msg(const Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_from_hedge_node_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(is_from_hedge_node_));
  // @@protoc_insertion_point(copy_constructor:Msg)
}

void Msg::SharedCtor() {
  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_from_hedge_node_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(is_from_hedge_node_));
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:Msg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Msg::ArenaDtor(void* object) {
  Msg* _this = reinterpret_cast< Msg* >(object);
  (void)_this;
}
void Msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg& Msg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_message_2eproto.base);
  return *internal_default_instance();
}


void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_from_hedge_node_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(is_from_hedge_node_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 client_send_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          client_send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recipient_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          recipient_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 root_send_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          root_send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_from_hedge_node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_from_hedge_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 experiment_starting_msg_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          experiment_starting_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deadline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 downstream = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          downstream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 msg_id = 1;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_msg_id(), target);
  }

  // int64 client_send_time = 2;
  if (this->client_send_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_client_send_time(), target);
  }

  // int32 recipient_id = 3;
  if (this->recipient_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_recipient_id(), target);
  }

  // int64 root_send_time = 4;
  if (this->root_send_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_root_send_time(), target);
  }

  // int32 msg_type = 5;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_msg_type(), target);
  }

  // int32 is_from_hedge_node = 6;
  if (this->is_from_hedge_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_is_from_hedge_node(), target);
  }

  // int64 experiment_starting_msg_id = 7;
  if (this->experiment_starting_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_experiment_starting_msg_id(), target);
  }

  // int64 deadline = 8;
  if (this->deadline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_deadline(), target);
  }

  // int64 downstream = 9;
  if (this->downstream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_downstream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Msg)
  return target;
}

size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_msg_id());
  }

  // int64 client_send_time = 2;
  if (this->client_send_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_client_send_time());
  }

  // int64 root_send_time = 4;
  if (this->root_send_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_root_send_time());
  }

  // int32 recipient_id = 3;
  if (this->recipient_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recipient_id());
  }

  // int32 msg_type = 5;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_type());
  }

  // int64 experiment_starting_msg_id = 7;
  if (this->experiment_starting_msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_experiment_starting_msg_id());
  }

  // int64 deadline = 8;
  if (this->deadline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deadline());
  }

  // int64 downstream = 9;
  if (this->downstream() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_downstream());
  }

  // int32 is_from_hedge_node = 6;
  if (this->is_from_hedge_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_from_hedge_node());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg)
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from.client_send_time() != 0) {
    _internal_set_client_send_time(from._internal_client_send_time());
  }
  if (from.root_send_time() != 0) {
    _internal_set_root_send_time(from._internal_root_send_time());
  }
  if (from.recipient_id() != 0) {
    _internal_set_recipient_id(from._internal_recipient_id());
  }
  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from.experiment_starting_msg_id() != 0) {
    _internal_set_experiment_starting_msg_id(from._internal_experiment_starting_msg_id());
  }
  if (from.deadline() != 0) {
    _internal_set_deadline(from._internal_deadline());
  }
  if (from.downstream() != 0) {
    _internal_set_downstream(from._internal_downstream());
  }
  if (from.is_from_hedge_node() != 0) {
    _internal_set_is_from_hedge_node(from._internal_is_from_hedge_node());
  }
}

void Msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  return true;
}

void Msg::InternalSwap(Msg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg, is_from_hedge_node_)
      + sizeof(Msg::is_from_hedge_node_)
      - PROTOBUF_FIELD_OFFSET(Msg, msg_id_)>(
          reinterpret_cast<char*>(&msg_id_),
          reinterpret_cast<char*>(&other->msg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatsFields::InitAsDefaultInstance() {
}
class StatsFields::_Internal {
 public:
};

StatsFields::StatsFields(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StatsFields)
}
StatsFields::StatsFields(const StatsFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latency_, &from.latency_,
    static_cast<size_t>(reinterpret_cast<char*>(&holding_duration_) -
    reinterpret_cast<char*>(&latency_)) + sizeof(holding_duration_));
  // @@protoc_insertion_point(copy_constructor:StatsFields)
}

void StatsFields::SharedCtor() {
  ::memset(&latency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&holding_duration_) -
      reinterpret_cast<char*>(&latency_)) + sizeof(holding_duration_));
}

StatsFields::~StatsFields() {
  // @@protoc_insertion_point(destructor:StatsFields)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatsFields::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatsFields::ArenaDtor(void* object) {
  StatsFields* _this = reinterpret_cast< StatsFields* >(object);
  (void)_this;
}
void StatsFields::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatsFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatsFields& StatsFields::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatsFields_message_2eproto.base);
  return *internal_default_instance();
}


void StatsFields::Clear() {
// @@protoc_insertion_point(message_clear_start:StatsFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&holding_duration_) -
      reinterpret_cast<char*>(&latency_)) + sizeof(holding_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatsFields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 latency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 release_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          release_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 holding_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          holding_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deadline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatsFields::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatsFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 latency = 1;
  if (this->latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_latency(), target);
  }

  // int64 release_time = 2;
  if (this->release_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_release_time(), target);
  }

  // int32 holding_duration = 3;
  if (this->holding_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_holding_duration(), target);
  }

  // int64 deadline = 4;
  if (this->deadline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_deadline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatsFields)
  return target;
}

size_t StatsFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatsFields)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 latency = 1;
  if (this->latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_latency());
  }

  // int64 release_time = 2;
  if (this->release_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_release_time());
  }

  // int64 deadline = 4;
  if (this->deadline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deadline());
  }

  // int32 holding_duration = 3;
  if (this->holding_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_holding_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsFields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StatsFields)
  GOOGLE_DCHECK_NE(&from, this);
  const StatsFields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatsFields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StatsFields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StatsFields)
    MergeFrom(*source);
  }
}

void StatsFields::MergeFrom(const StatsFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatsFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latency() != 0) {
    _internal_set_latency(from._internal_latency());
  }
  if (from.release_time() != 0) {
    _internal_set_release_time(from._internal_release_time());
  }
  if (from.deadline() != 0) {
    _internal_set_deadline(from._internal_deadline());
  }
  if (from.holding_duration() != 0) {
    _internal_set_holding_duration(from._internal_holding_duration());
  }
}

void StatsFields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StatsFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsFields::CopyFrom(const StatsFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatsFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsFields::IsInitialized() const {
  return true;
}

void StatsFields::InternalSwap(StatsFields* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatsFields, holding_duration_)
      + sizeof(StatsFields::holding_duration_)
      - PROTOBUF_FIELD_OFFSET(StatsFields, latency_)>(
          reinterpret_cast<char*>(&latency_),
          reinterpret_cast<char*>(&other->latency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsFields::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Stats_RecordsEntry_DoNotUse::Stats_RecordsEntry_DoNotUse() {}
Stats_RecordsEntry_DoNotUse::Stats_RecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Stats_RecordsEntry_DoNotUse::MergeFrom(const Stats_RecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Stats_RecordsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Stats_RecordsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Stats::InitAsDefaultInstance() {
}
class Stats::_Internal {
 public:
};

Stats::Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Stats)
}
Stats::Stats(const Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  records_.MergeFrom(from.records_);
  ::memcpy(&total_msgs_, &from.total_msgs_,
    static_cast<size_t>(reinterpret_cast<char*>(&recipient_id_) -
    reinterpret_cast<char*>(&total_msgs_)) + sizeof(recipient_id_));
  // @@protoc_insertion_point(copy_constructor:Stats)
}

void Stats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stats_message_2eproto.base);
  ::memset(&total_msgs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recipient_id_) -
      reinterpret_cast<char*>(&total_msgs_)) + sizeof(recipient_id_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Stats::ArenaDtor(void* object) {
  Stats* _this = reinterpret_cast< Stats* >(object);
  (void)_this;
}
void Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stats& Stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stats_message_2eproto.base);
  return *internal_default_instance();
}


void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  records_.Clear();
  ::memset(&total_msgs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recipient_id_) -
      reinterpret_cast<char*>(&total_msgs_)) + sizeof(recipient_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 recipient_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          recipient_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, .StatsFields> records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total_msgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_msgs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 recipient_id = 1;
  if (this->recipient_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_recipient_id(), target);
  }

  // map<int64, .StatsFields> records = 2;
  if (!this->_internal_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::StatsFields >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::StatsFields >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::StatsFields >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Stats_RecordsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::StatsFields >::const_iterator
          it = this->_internal_records().begin();
          it != this->_internal_records().end(); ++it) {
        target = Stats_RecordsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // int64 total_msgs = 3;
  if (this->total_msgs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_msgs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Stats)
  return target;
}

size_t Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .StatsFields> records = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::StatsFields >::const_iterator
      it = this->_internal_records().begin();
      it != this->_internal_records().end(); ++it) {
    total_size += Stats_RecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 total_msgs = 3;
  if (this->total_msgs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_msgs());
  }

  // int32 recipient_id = 1;
  if (this->recipient_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recipient_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Stats)
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (from.total_msgs() != 0) {
    _internal_set_total_msgs(from._internal_total_msgs());
  }
  if (from.recipient_id() != 0) {
    _internal_set_recipient_id(from._internal_recipient_id());
  }
}

void Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  return true;
}

void Stats::InternalSwap(Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  records_.Swap(&other->records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stats, recipient_id_)
      + sizeof(Stats::recipient_id_)
      - PROTOBUF_FIELD_OFFSET(Stats, total_msgs_)>(
          reinterpret_cast<char*>(&total_msgs_),
          reinterpret_cast<char*>(&other->total_msgs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ManagementMsg_AddrsEntry_DoNotUse::ManagementMsg_AddrsEntry_DoNotUse() {}
ManagementMsg_AddrsEntry_DoNotUse::ManagementMsg_AddrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ManagementMsg_AddrsEntry_DoNotUse::MergeFrom(const ManagementMsg_AddrsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ManagementMsg_AddrsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ManagementMsg_AddrsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ManagementMsg::InitAsDefaultInstance() {
  ::_ManagementMsg_default_instance_._instance.get_mutable()->order_sub_req_ = const_cast< ::StartOrdersSubmission*>(
      ::StartOrdersSubmission::internal_default_instance());
}
class ManagementMsg::_Internal {
 public:
  static const ::StartOrdersSubmission& order_sub_req(const ManagementMsg* msg);
};

const ::StartOrdersSubmission&
ManagementMsg::_Internal::order_sub_req(const ManagementMsg* msg) {
  return *msg->order_sub_req_;
}
ManagementMsg::ManagementMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addrs_(arena),
  request_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ManagementMsg)
}
ManagementMsg::ManagementMsg(const ManagementMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      request_(from.request_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addrs_.MergeFrom(from.addrs_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mac_address(),
      GetArena());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_order_sub_req()) {
    order_sub_req_ = new ::StartOrdersSubmission(*from.order_sub_req_);
  } else {
    order_sub_req_ = nullptr;
  }
  ::memcpy(&msg_type_, &from.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&msg_type_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:ManagementMsg)
}

void ManagementMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManagementMsg_message_2eproto.base);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_sub_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&order_sub_req_)) + sizeof(stop_));
}

ManagementMsg::~ManagementMsg() {
  // @@protoc_insertion_point(destructor:ManagementMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManagementMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_sub_req_;
}

void ManagementMsg::ArenaDtor(void* object) {
  ManagementMsg* _this = reinterpret_cast< ManagementMsg* >(object);
  (void)_this;
}
void ManagementMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManagementMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManagementMsg& ManagementMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManagementMsg_message_2eproto.base);
  return *internal_default_instance();
}


void ManagementMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ManagementMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addrs_.Clear();
  request_.Clear();
  mac_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && order_sub_req_ != nullptr) {
    delete order_sub_req_;
  }
  order_sub_req_ = nullptr;
  ::memset(&msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&msg_type_)) + sizeof(stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManagementMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mac_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ManagementMsg.mac_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ManagementMsg.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> addrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&addrs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 msg_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_request();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ManagementMsg.request"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ManagementMsg.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .StartOrdersSubmission order_sub_req = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_sub_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManagementMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManagementMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mac_address = 1;
  if (this->mac_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_address().data(), static_cast<int>(this->_internal_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ManagementMsg.mac_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mac_address(), target);
  }

  // string ip_address = 2;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ManagementMsg.ip_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip_address(), target);
  }

  // map<string, string> addrs = 3;
  if (!this->_internal_addrs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ManagementMsg.AddrsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ManagementMsg.AddrsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_addrs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_addrs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_addrs().begin();
          it != this->_internal_addrs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ManagementMsg_AddrsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_addrs().begin();
          it != this->_internal_addrs().end(); ++it) {
        target = ManagementMsg_AddrsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 msg_type = 4;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_msg_type(), target);
  }

  // bool stop = 5;
  if (this->stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_stop(), target);
  }

  // repeated string request = 6;
  for (int i = 0, n = this->_internal_request_size(); i < n; i++) {
    const auto& s = this->_internal_request(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ManagementMsg.request");
    target = stream->WriteString(6, s, target);
  }

  // string data = 7;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ManagementMsg.data");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_data(), target);
  }

  // .StartOrdersSubmission order_sub_req = 8;
  if (this->has_order_sub_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::order_sub_req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManagementMsg)
  return target;
}

size_t ManagementMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManagementMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> addrs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_addrs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_addrs().begin();
      it != this->_internal_addrs().end(); ++it) {
    total_size += ManagementMsg_AddrsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string request = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(request_.size());
  for (int i = 0, n = request_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      request_.Get(i));
  }

  // string mac_address = 1;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_address());
  }

  // string ip_address = 2;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .StartOrdersSubmission order_sub_req = 8;
  if (this->has_order_sub_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_sub_req_);
  }

  // int32 msg_type = 4;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_type());
  }

  // bool stop = 5;
  if (this->stop() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManagementMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManagementMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ManagementMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManagementMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManagementMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManagementMsg)
    MergeFrom(*source);
  }
}

void ManagementMsg::MergeFrom(const ManagementMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManagementMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrs_.MergeFrom(from.addrs_);
  request_.MergeFrom(from.request_);
  if (from.mac_address().size() > 0) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_order_sub_req()) {
    _internal_mutable_order_sub_req()->::StartOrdersSubmission::MergeFrom(from._internal_order_sub_req());
  }
  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  if (from.stop() != 0) {
    _internal_set_stop(from._internal_stop());
  }
}

void ManagementMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManagementMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagementMsg::CopyFrom(const ManagementMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManagementMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagementMsg::IsInitialized() const {
  return true;
}

void ManagementMsg::InternalSwap(ManagementMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addrs_.Swap(&other->addrs_);
  request_.InternalSwap(&other->request_);
  mac_address_.Swap(&other->mac_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManagementMsg, stop_)
      + sizeof(ManagementMsg::stop_)
      - PROTOBUF_FIELD_OFFSET(ManagementMsg, order_sub_req_)>(
          reinterpret_cast<char*>(&order_sub_req_),
          reinterpret_cast<char*>(&other->order_sub_req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManagementMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HedgingHint::InitAsDefaultInstance() {
}
class HedgingHint::_Internal {
 public:
};

HedgingHint::HedgingHint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HedgingHint)
}
HedgingHint::HedgingHint(const HedgingHint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&proxy_num_, &from.proxy_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&intensity_) -
    reinterpret_cast<char*>(&proxy_num_)) + sizeof(intensity_));
  // @@protoc_insertion_point(copy_constructor:HedgingHint)
}

void HedgingHint::SharedCtor() {
  ::memset(&proxy_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&proxy_num_)) + sizeof(intensity_));
}

HedgingHint::~HedgingHint() {
  // @@protoc_insertion_point(destructor:HedgingHint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HedgingHint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HedgingHint::ArenaDtor(void* object) {
  HedgingHint* _this = reinterpret_cast< HedgingHint* >(object);
  (void)_this;
}
void HedgingHint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HedgingHint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HedgingHint& HedgingHint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HedgingHint_message_2eproto.base);
  return *internal_default_instance();
}


void HedgingHint::Clear() {
// @@protoc_insertion_point(message_clear_start:HedgingHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&proxy_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&proxy_num_)) + sizeof(intensity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HedgingHint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 proxy_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          proxy_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float intensity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HedgingHint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HedgingHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 proxy_num = 1;
  if (this->proxy_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_proxy_num(), target);
  }

  // float intensity = 2;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_intensity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HedgingHint)
  return target;
}

size_t HedgingHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HedgingHint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 proxy_num = 1;
  if (this->proxy_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_proxy_num());
  }

  // float intensity = 2;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HedgingHint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HedgingHint)
  GOOGLE_DCHECK_NE(&from, this);
  const HedgingHint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HedgingHint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HedgingHint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HedgingHint)
    MergeFrom(*source);
  }
}

void HedgingHint::MergeFrom(const HedgingHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HedgingHint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proxy_num() != 0) {
    _internal_set_proxy_num(from._internal_proxy_num());
  }
  if (!(from.intensity() <= 0 && from.intensity() >= 0)) {
    _internal_set_intensity(from._internal_intensity());
  }
}

void HedgingHint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HedgingHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HedgingHint::CopyFrom(const HedgingHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HedgingHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HedgingHint::IsInitialized() const {
  return true;
}

void HedgingHint::InternalSwap(HedgingHint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HedgingHint, intensity_)
      + sizeof(HedgingHint::intensity_)
      - PROTOBUF_FIELD_OFFSET(HedgingHint, proxy_num_)>(
          reinterpret_cast<char*>(&proxy_num_),
          reinterpret_cast<char*>(&other->proxy_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HedgingHint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HoldreleaseHint::InitAsDefaultInstance() {
}
class HoldreleaseHint::_Internal {
 public:
};

HoldreleaseHint::HoldreleaseHint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  owd_estimates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:HoldreleaseHint)
}
HoldreleaseHint::HoldreleaseHint(const HoldreleaseHint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      owd_estimates_(from.owd_estimates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:HoldreleaseHint)
}

void HoldreleaseHint::SharedCtor() {
  index_ = 0;
}

HoldreleaseHint::~HoldreleaseHint() {
  // @@protoc_insertion_point(destructor:HoldreleaseHint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HoldreleaseHint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HoldreleaseHint::ArenaDtor(void* object) {
  HoldreleaseHint* _this = reinterpret_cast< HoldreleaseHint* >(object);
  (void)_this;
}
void HoldreleaseHint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HoldreleaseHint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HoldreleaseHint& HoldreleaseHint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HoldreleaseHint_message_2eproto.base);
  return *internal_default_instance();
}


void HoldreleaseHint::Clear() {
// @@protoc_insertion_point(message_clear_start:HoldreleaseHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owd_estimates_.Clear();
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HoldreleaseHint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 owd_estimates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_owd_estimates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_owd_estimates(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HoldreleaseHint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HoldreleaseHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // repeated int32 owd_estimates = 2;
  {
    int byte_size = _owd_estimates_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_owd_estimates(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HoldreleaseHint)
  return target;
}

size_t HoldreleaseHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HoldreleaseHint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 owd_estimates = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->owd_estimates_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _owd_estimates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HoldreleaseHint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HoldreleaseHint)
  GOOGLE_DCHECK_NE(&from, this);
  const HoldreleaseHint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HoldreleaseHint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HoldreleaseHint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HoldreleaseHint)
    MergeFrom(*source);
  }
}

void HoldreleaseHint::MergeFrom(const HoldreleaseHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HoldreleaseHint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owd_estimates_.MergeFrom(from.owd_estimates_);
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void HoldreleaseHint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HoldreleaseHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HoldreleaseHint::CopyFrom(const HoldreleaseHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HoldreleaseHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoldreleaseHint::IsInitialized() const {
  return true;
}

void HoldreleaseHint::InternalSwap(HoldreleaseHint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owd_estimates_.InternalSwap(&other->owd_estimates_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HoldreleaseHint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartOrdersSubmission::InitAsDefaultInstance() {
}
class StartOrdersSubmission::_Internal {
 public:
};

StartOrdersSubmission::StartOrdersSubmission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:StartOrdersSubmission)
}
StartOrdersSubmission::StartOrdersSubmission(const StartOrdersSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_fancypq_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(use_fancypq_));
  // @@protoc_insertion_point(copy_constructor:StartOrdersSubmission)
}

void StartOrdersSubmission::SharedCtor() {
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_fancypq_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(use_fancypq_));
}

StartOrdersSubmission::~StartOrdersSubmission() {
  // @@protoc_insertion_point(destructor:StartOrdersSubmission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartOrdersSubmission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StartOrdersSubmission::ArenaDtor(void* object) {
  StartOrdersSubmission* _this = reinterpret_cast< StartOrdersSubmission* >(object);
  (void)_this;
}
void StartOrdersSubmission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartOrdersSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartOrdersSubmission& StartOrdersSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartOrdersSubmission_message_2eproto.base);
  return *internal_default_instance();
}


void StartOrdersSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:StartOrdersSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_fancypq_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(use_fancypq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartOrdersSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 experiment_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          experiment_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bid_range_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bid_range_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bid_range_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bid_range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ask_range_start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ask_range_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ask_range_end = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ask_range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fixed_interarrival = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          fixed_interarrival_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_fancypq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          use_fancypq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartOrdersSubmission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartOrdersSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_request_id(), target);
  }

  // int32 rate = 2;
  if (this->rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rate(), target);
  }

  // int32 experiment_duration = 3;
  if (this->experiment_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_experiment_duration(), target);
  }

  // uint64 start_timestamp = 4;
  if (this->start_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_start_timestamp(), target);
  }

  // int32 bid_range_start = 5;
  if (this->bid_range_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_bid_range_start(), target);
  }

  // int32 bid_range_end = 6;
  if (this->bid_range_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bid_range_end(), target);
  }

  // int32 ask_range_start = 7;
  if (this->ask_range_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ask_range_start(), target);
  }

  // int32 ask_range_end = 8;
  if (this->ask_range_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_ask_range_end(), target);
  }

  // int32 fixed_interarrival = 9;
  if (this->fixed_interarrival() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_fixed_interarrival(), target);
  }

  // bool use_fancypq = 10;
  if (this->use_fancypq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_use_fancypq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartOrdersSubmission)
  return target;
}

size_t StartOrdersSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartOrdersSubmission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_request_id());
  }

  // int32 rate = 2;
  if (this->rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rate());
  }

  // int32 experiment_duration = 3;
  if (this->experiment_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_experiment_duration());
  }

  // uint64 start_timestamp = 4;
  if (this->start_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_timestamp());
  }

  // int32 bid_range_start = 5;
  if (this->bid_range_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_range_start());
  }

  // int32 bid_range_end = 6;
  if (this->bid_range_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_range_end());
  }

  // int32 ask_range_start = 7;
  if (this->ask_range_start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_range_start());
  }

  // int32 ask_range_end = 8;
  if (this->ask_range_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_range_end());
  }

  // int32 fixed_interarrival = 9;
  if (this->fixed_interarrival() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fixed_interarrival());
  }

  // bool use_fancypq = 10;
  if (this->use_fancypq() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartOrdersSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartOrdersSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const StartOrdersSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartOrdersSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartOrdersSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartOrdersSubmission)
    MergeFrom(*source);
  }
}

void StartOrdersSubmission::MergeFrom(const StartOrdersSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartOrdersSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.rate() != 0) {
    _internal_set_rate(from._internal_rate());
  }
  if (from.experiment_duration() != 0) {
    _internal_set_experiment_duration(from._internal_experiment_duration());
  }
  if (from.start_timestamp() != 0) {
    _internal_set_start_timestamp(from._internal_start_timestamp());
  }
  if (from.bid_range_start() != 0) {
    _internal_set_bid_range_start(from._internal_bid_range_start());
  }
  if (from.bid_range_end() != 0) {
    _internal_set_bid_range_end(from._internal_bid_range_end());
  }
  if (from.ask_range_start() != 0) {
    _internal_set_ask_range_start(from._internal_ask_range_start());
  }
  if (from.ask_range_end() != 0) {
    _internal_set_ask_range_end(from._internal_ask_range_end());
  }
  if (from.fixed_interarrival() != 0) {
    _internal_set_fixed_interarrival(from._internal_fixed_interarrival());
  }
  if (from.use_fancypq() != 0) {
    _internal_set_use_fancypq(from._internal_use_fancypq());
  }
}

void StartOrdersSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartOrdersSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartOrdersSubmission::CopyFrom(const StartOrdersSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartOrdersSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartOrdersSubmission::IsInitialized() const {
  return true;
}

void StartOrdersSubmission::InternalSwap(StartOrdersSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartOrdersSubmission, use_fancypq_)
      + sizeof(StartOrdersSubmission::use_fancypq_)
      - PROTOBUF_FIELD_OFFSET(StartOrdersSubmission, request_id_)>(
          reinterpret_cast<char*>(&request_id_),
          reinterpret_cast<char*>(&other->request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartOrdersSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManagementToDataplane::InitAsDefaultInstance() {
  ::_ManagementToDataplane_default_instance_._instance.get_mutable()->order_sub_req_ = const_cast< ::StartOrdersSubmission*>(
      ::StartOrdersSubmission::internal_default_instance());
}
class ManagementToDataplane::_Internal {
 public:
  static const ::StartOrdersSubmission& order_sub_req(const ManagementToDataplane* msg);
};

const ::StartOrdersSubmission&
ManagementToDataplane::_Internal::order_sub_req(const ManagementToDataplane* msg) {
  return *msg->order_sub_req_;
}
ManagementToDataplane::ManagementToDataplane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ManagementToDataplane)
}
ManagementToDataplane::ManagementToDataplane(const ManagementToDataplane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order_sub_req()) {
    order_sub_req_ = new ::StartOrdersSubmission(*from.order_sub_req_);
  } else {
    order_sub_req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ManagementToDataplane)
}

void ManagementToDataplane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManagementToDataplane_message_2eproto.base);
  order_sub_req_ = nullptr;
}

ManagementToDataplane::~ManagementToDataplane() {
  // @@protoc_insertion_point(destructor:ManagementToDataplane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManagementToDataplane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_sub_req_;
}

void ManagementToDataplane::ArenaDtor(void* object) {
  ManagementToDataplane* _this = reinterpret_cast< ManagementToDataplane* >(object);
  (void)_this;
}
void ManagementToDataplane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManagementToDataplane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManagementToDataplane& ManagementToDataplane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManagementToDataplane_message_2eproto.base);
  return *internal_default_instance();
}


void ManagementToDataplane::Clear() {
// @@protoc_insertion_point(message_clear_start:ManagementToDataplane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && order_sub_req_ != nullptr) {
    delete order_sub_req_;
  }
  order_sub_req_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManagementToDataplane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .StartOrdersSubmission order_sub_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_sub_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManagementToDataplane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManagementToDataplane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .StartOrdersSubmission order_sub_req = 1;
  if (this->has_order_sub_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order_sub_req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManagementToDataplane)
  return target;
}

size_t ManagementToDataplane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManagementToDataplane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .StartOrdersSubmission order_sub_req = 1;
  if (this->has_order_sub_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_sub_req_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManagementToDataplane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManagementToDataplane)
  GOOGLE_DCHECK_NE(&from, this);
  const ManagementToDataplane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManagementToDataplane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManagementToDataplane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManagementToDataplane)
    MergeFrom(*source);
  }
}

void ManagementToDataplane::MergeFrom(const ManagementToDataplane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManagementToDataplane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order_sub_req()) {
    _internal_mutable_order_sub_req()->::StartOrdersSubmission::MergeFrom(from._internal_order_sub_req());
  }
}

void ManagementToDataplane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManagementToDataplane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagementToDataplane::CopyFrom(const ManagementToDataplane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManagementToDataplane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagementToDataplane::IsInitialized() const {
  return true;
}

void ManagementToDataplane::InternalSwap(ManagementToDataplane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(order_sub_req_, other->order_sub_req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManagementToDataplane::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Msg* Arena::CreateMaybeMessage< ::Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Msg >(arena);
}
template<> PROTOBUF_NOINLINE ::StatsFields* Arena::CreateMaybeMessage< ::StatsFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatsFields >(arena);
}
template<> PROTOBUF_NOINLINE ::Stats_RecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::Stats_RecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Stats_RecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Stats* Arena::CreateMaybeMessage< ::Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::ManagementMsg_AddrsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ManagementMsg_AddrsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ManagementMsg_AddrsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ManagementMsg* Arena::CreateMaybeMessage< ::ManagementMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ManagementMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::HedgingHint* Arena::CreateMaybeMessage< ::HedgingHint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HedgingHint >(arena);
}
template<> PROTOBUF_NOINLINE ::HoldreleaseHint* Arena::CreateMaybeMessage< ::HoldreleaseHint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HoldreleaseHint >(arena);
}
template<> PROTOBUF_NOINLINE ::StartOrdersSubmission* Arena::CreateMaybeMessage< ::StartOrdersSubmission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartOrdersSubmission >(arena);
}
template<> PROTOBUF_NOINLINE ::ManagementToDataplane* Arena::CreateMaybeMessage< ::ManagementToDataplane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ManagementToDataplane >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
